#BEGIN EXTERNAL USERS
#---
#apiVersion: v1
#kind: Secret
#metadata:
#  name: ldap-bind-secrets # default for secretRefs.ldapSecretRef
#type: Opaque
#data:
#  # Base64 encoded password for the LDAP bind user.
#  reva-ldap-bind-password: XXXXXXXXXXXXX
## If your LDAP secure server is not using a trusted certificate
## features.externalUserManagement.ldap.certTrusted == false
## you need to set your LDAP CA (Certificate Authority) certificate in following secret:
#---
#apiVersion: v1
#kind: Secret
#metadata:
#  name: ldap-ca # default for secretRefs.ldapCaRef
#type: Opaque
#data:
#  # Base64 encoded certificate of the CA that issued the LDAP server certificate.
#  ldap-ca.crt: XXXXXXXXXXXXX
#END EXTERNAL USERS
#BEGIN INTERNAL USERS
# apiVersion: v1
# kind: Secret
# metadata:
#     # default for secretRefs.ldapSecretRef
#     name: ldap-bind-secrets
# type: Opaque
# data:
#     reva-ldap-bind-password: eVc2NUt5Slp1bG0uZ2xLYmdGTHQ1TEFWM1hSVTdaODhXN3I3LFd5MG1YbmJRRHRqUzUK
#     idp-ldap-bind-password: NHQwMExMZ3NHWFRaVzJadVlxOWwyNzFNU3JFSGNld1RJdFdGM0JkZGYzb3F1S29Ud1gK
#     graph-ldap-bind-password: djlMUXM3RXpnZjZib1h5RFJrNmZSaktyVHdWRGZ4eXhIREtJdGVWc3ZVZFNndkpab2gK
# ---
# apiVersion: v1
# kind: Secret
# metadata:
#     # default for secretRefs.ldapCaRef
#     name: ldap-ca
# type: Opaque
# data:
#     # how to generate: base64 encode the pem-encoded certificate of a (self-signed) x509 certificate authority
#     # example generation commands:
#     #  - `openssl genrsa -out ldap-ca.key 4096`
#     #  - `openssl req -new -x509 -days 3650 -key ldap-ca.key -out ldap-ca.crt`
#     #  - `cat ldap-ca.crt | base64 | tr -d '\n' && echo`
#     ldap-ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZ0ekNDQTUrZ0F3SUJBZ0lVZFIvL05laVZlWGs5U1dzTTVYbS9IeDlLMkkwd0RRWUpLb1pJaHZjTkFRRUwKQlFBd2F6RUxNQWtHQTFVRUJoTUNWVk14RURBT0JnTlZCQWdNQjBac2IzSnBaR0V4RWpBUUJnTlZCQWNNQ1VkeQpiM1psYkdGdVpERWRNQnNHQTFVRUNnd1VSblY2ZW1KaGJHd2dSVzUwWlhKd2NtbHpaWE14RnpBVkJnTlZCQU1NCkRtTnNiM1ZrTG1aNlltd3VlSGw2TUI0WERUSTBNREV4TmpFNU5EVXdObG9YRFRNME1ERXhNekU1TkRVd05sb3cKYXpFTE1Ba0dBMVVFQmhNQ1ZWTXhFREFPQmdOVkJBZ01CMFpzYjNKcFpHRXhFakFRQmdOVkJBY01DVWR5YjNabApiR0Z1WkRFZE1Cc0dBMVVFQ2d3VVJuVjZlbUpoYkd3Z1JXNTBaWEp3Y21selpYTXhGekFWQmdOVkJBTU1EbU5zCmIzVmtMbVo2WW13dWVIbDZNSUlDSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQWc4QU1JSUNDZ0tDQWdFQXV6NHMKRzcvdDEyVnpkTzZ2MDd1QWFSd0dNOWZ1NWRpc3hYeVJTcFo0bzlkdFlDODZtUWpwSFNtaVIzZHl5cGg0dTdUZQpZajU5bzAvWTRHbjdlWDIwMk1wNHFxWlFiMS85KzJtU0RZWkN1ZFpxQVZhLzNIaUJYeC9pZjFuRmdSNGU3WlUyCnU3THkxdk9TbUdDbTMwbmt0TVlVM0J2eXZjZytBZDBqK3BNYUdLdkhmY3IwRjZuN1RmdDlMeDBYZmFPcjlkT3YKNW93eGV6cVZVeEtjUWt3Y2NMd3JHT3JXZVdMalY1YWlsZysxZDdtMW9ITDlyRkttQm9UWmNQMzVCdXBrV3BmOQpKcjg2TWJSd1hGMDJvS25JRnM3dUwveHlsdFdiZGRlK1BhYThUMzRpeENOdThheE14SXBWTUhGZ3RsUkZEcUNpCnhRcjZNZ0ZKZFVPSEo2WU91bDRoczh4QkVUZWo4OGFsUnoyajZYbFJlWjRvcFZoV0ZKaVRjSDg1bW1iczlqekIKQkIyR0s0NGVwb1V1YVBYREtIOVNkK2FRcVdldVJUZnFRUXBOcGVZcW5LZGlNVXMzS2RFT3B0bUtmUHpxTVpiVgpad284amNsQXAzcVhPTWU5NUsvM0Q2NHE4cURyK1AxVlM2Q0ZWaGY4YjB3dkUxU3Y0Q2hleXdWR0grY0wvaDR3CmpwbGhXR2M4L3dIcUNyY1JGdHUxaDV3MkFES0FGVG1jZU9TZGZQbjBycERKNSt2SDdZVC9qUVpHUEJpU1ZmOUYKRUNzY1JlWit4MFlzNmxUVktiRVByNWJGR3Z6MDRnNlorSjZQU0Z2L3g3SGZWNHlzeTRlZENpUElDbW8rbTcxNgp0a0F1dVVwUGV0Z0duZVpGRlduTnlrcExGbnJpazBuTUVNZnpzTEVDQXdFQUFhTlRNRkV3SFFZRFZSME9CQllFCkZPZzcvck82MXhmTDc3dGhMSjBOZDBhOVMrVXFNQjhHQTFVZEl3UVlNQmFBRk9nNy9yTzYxeGZMNzd0aExKME4KZDBhOVMrVXFNQThHQTFVZEV3RUIvd1FGTUFNQkFmOHdEUVlKS29aSWh2Y05BUUVMQlFBRGdnSUJBS2tDK1phSgpkUmNyS1FmQkkzRlBwOTlTMG96dW9zS29vYzRmeEk2OEtpYzk4NlpWQ0MzMmxPR3JqUlVEREV2VUFoamd1YzR6ClVONDdrUS9WRW1qaEIwTDk2bjhNZ1hYMlZDYldwK2JVL0ZwckFyM25CWXBzSHl6b3Z1MmhoajV5V3hWdkgrRGIKQVJMK0I0b3JJbFJWMm44dWNDMFNlaHY4QnNUamFiVUkzRXREMUx6OVdXV1puLzk4dzc5WHFGWHhSalh5aDl2WApMbWhneGZ0SG9vL3k4WTFIRlErdE9ETnhmajBvK0xPeHp2NTBSemJRRVhmVXJBZUorRGVmM0lUbHVMWjBuZjZjCmFYbDRsNjJ4MFJUeG45aU81ckZIcmFCRzNHbEt4YTUzQm5NT0tDSWx0SXA1Slg3NWxtdmJadk5PdnRqQXpGL20KVXprNFFaOEF6b2NGMlN2VDJpVEpDcUV6VUdNN1JKOHpZLzZFc0dUTlloY2ZBaEEzcGplUGFGb1MybmY2QUhZUwp5ZllWeUdKeG94SUdQMEtld1JZaW5FSHIzU2ZSNlYxUzl5YVhNeENvT2ptOURtOUhHQVViOEpRTXB5NHowZFNUClIxZlI5MmFvUThHV3IvcGs5VmZEN25YbmN4MUJJcWVLWlZIYi9INVcycFhrZDdGZ0RpUFU3Q3diLzAzVjFPRjIKZlA3TnV6bVdJMTlFekU0YjhyNW5UaVBzSnBVTENycUdRSVZRSm5uZlVhVGNRUFd3dnZrSWJ2UStDUDVtRzBkbAovUS9neEdHbWh6V2RSbmpsdk5UUGtlVzlENlB4TkE3aFA5NHMzUHl0aXlVaGN5YmxmL09YTW5XMmRvVlYrNGtBCmVCd1BIdVpEek9JRnNKa245eDgrMzliN3ovMjNpam9XU0xodQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
# ---
# apiVersion: v1
# kind: Secret
# metadata:
#     # default for secretRefs.ldapCertRef
#     name: ldap-cert
# type: Opaque
# data:
#     # how to generate: base64 encode a private key (eg. ed25519, ensure that you use reasonable long key size)
#     # example generation commands:
#     #  - `openssl genrsa -out ldap.key 4096`
#     #  - `cat ldap.key | base64 | tr -d '\n' && echo`
#     ldap.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUpRZ0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQ1N3d2dna29BZ0VBQW9JQ0FRQzJtVFkxMmkweDRZVTUKWHZwRzRoSTdnQ21CMzdYNWMrZ0dMRitVVGdCY2hyWE9KaGdORXlPanBnNHZCRmVZM3F4RURHR2VnUU5IQWVCNgpaUUxIdmhrUjF4eFJJMFlEZ2phNnMxbEpJNGpVTHltOEYwS3REUGpnZFNmODJhQ1J6V3dCSlBueUc1Zm5Vanh3CnA2TXNXdDB5YkNBbFEzTi9BTWd1MmZpOFNTQi9pS2tsMjBScXlFQjN0K3JsdmkvbDBYQzY4OEwxWHdRektTUVcKYTIxN2Q2T2V1VERFTWYrbGhIUFRrWTFWY0VjR2U5OHN3UDY3UmY2MklRSiswTWl2b1FmSEpzSmxRSGNDRmNQSgprYmYvY2tONjFWdlZKWU0wM0NoUkVMb0JYUFA0NWFiZTMxeU1SSklWTE5EVlQxQlNMc01LYUV4Y3R5bi8zVWV4ClJqZ3JWOExFL25iWVplZGFiY0dPYnBRMm1UL0NJUE1XRk9ib1kyV2Nrd1JnWDFaNkJPS2w5STNvcmtOSnlNMG4KTDlPSjNTKzJicTgwM2VYN1c5RGh0U045YzNCVEdLT05MQ24zd05YaWdEa3oxNk4wb3grZFVyOWNwUE80elRiaQpmcnFDbHo3T00zcUtmMkpMSXZYYUVWSXNITTFobFdCbndtY2J2SlE1MHg1bE52VFdERW1XQ25yNG1MeTI2VHVtCnI5Q0tTVXc3Q2FGSGk1ZGpWWkFPUnJTRm5EdVlVN0lPU0ttV1c3QlcwUmFxWUgvU05FUzRucXhlanVmekYzM0MKbXhmQ1hPWVVJZGRJK0pYdHdNdzBlMm1jU2V5NmNBZXJUN09yc0dsMHovaGVvQXBkb2lkSEFVUWRydnZWSWtXYQpZaWFURnJ2cVFqSjVydTh0NXVTMXA2b3BEWEVvcVFJREFRQUJBb0lDQUFSaUpLNUJ4TXg1L3JYOEhQTjNLVnRpCnpmeEhaOG1yZWVJdURnUlVKQWVVbDBneDIybHk4R3ZWQ0dtaUI4MU1hU1BBRFZiZC8zdGtwT1FqU1NBTTVQS3IKOElyVkZ6RHQzd3ozMGJpakFQMmcvVFk5ODdTT1Iyb3gvY29BMm0wdG1uNWppaG1CQnBJL3crSXJjQXdZU1UrVQp6MmU5bVFmdk41OENUZ21ORXRuazZMU1hNU3NFRUNJZm1PUzNmbFJjeFFGRDZVWDFLRGRuTVMzVm1kejVLQVVmCktuZkhRSDBUY3lsY3lPRUliemdOWUxQbEZTaGZPNGhaUGdOWDFUMThGdUQxd2Z4bXdnU2JpNlhxMk5rcHY4dHkKMUQvSFpRRXZtTXNyWk4rMEFNcFVqdjh5S3ZsV0N4QzFrUFRSOE5wc00zUHNRWXNIUFp1ZUR3TEhMZ0dDVzVOUApDTDUwd3ZsSGNkUk1BUUFoSHRPdDZUS3RFSjV3UStpK04ybmM4eEJ1NlNwWXZ0MkpESmIzS1gyYnRSSFBmaHpPCnNkNmphWktyYytOdU1lWHoxWXA3ZitVUXM1ZVlKaHA2REc4b2MxcVpaQVhEYk1XZU1YZEI2V2c4KzBFVUNpcUgKWWdtSGZ5RkNXOTI3b1ZWUXpkMkNZUEVBcyt0VGpmU2UvYVJVQzlNMTF3K2l1NVh2aEZ6b1ZONkNaWGdBTWsvZAoyNTJhTWRkV1VtalhKN3VKRHJBQnd6cExBVndyVmlZZlFGWmFCU1BtYmM0NXA4OVgzTjRBcm12ellqMW9DSGltCllkNVBtOXZaRGhRRXNWSmYvclk0cnlROHNtNEgyTlI5UWFtWndlQ2NQSU1Lcm03VzZkekR4MUNKSDhjWkFDTm8KMFFXU1pPM3hkN2tYMDdhYXNyUDFBb0lCQVFEK2VQN2FEckNFV2t6OGlBMzdDTVVzQnoraEdGQllOa0UybEpZbQpEek1uZHNWT2h3UVhWVjNtcG4vSmgyU0g3U0t3Wnd2SkN5cjVwc2hZaGtFbGRzdVJzMWJ0ckpqK201WGVLczBiCnFQTklBdzhVVkh2U3o4MU9WWExqVTFCRi9RRW9VYnRGemR4OXoxR0RGQXpFTks0SnJIV1NpUlo0ZC9HaWZJWG0KVlg1eTZEZUNXeXk4VlZ1aFdSOU9ka0svdnhYMklJdnBqVjh6V1hBaW9WWndlUlhtdUtDTnFNWS8wUVpBYUR2eApseWZURktVcU0yMjNIU1VyVnFQelZ4cWkyRWtFTGxjckQ3N29POVg3bUl5Ykd0R0pJTjRVSEgwRytOL09HTVVFCjFvU2hySks4T2laK2Z3ZjN4VjNjL1hvazUrR1FITnpaa0tEZk9XNkdNeENkUEtjdEFvSUJBUUMzc2NlUWs1OTQKWUZkbU02MlU1L3F1UFRsM040SGtVYy9FWTd4VlhBcnlla2J1ejFHZ1RsOGhRTVJwdWZCR3F4M3NvTjdMV2lFaApHNE9RWXg3UWVrVnFVY3IrNFk3TnF0Yy9BOEFMd0JTZWF0YjlDZTQxMVdwUXcyTy9IeG9HTS8vTjdOSVJLSmFZClJuUFBNck04bEVIRHI5RGpIZGZLT2taOWVaWjNoMElzcmZsUC9ZUXFkZ09BakVXdDZveENnMzVNL0p4Q1B5T2kKV3pRVHluK2hOUzBncVRMSnFlNjFncElkK0ZTVmVaVEVhZkJRVFZUNEk2dnlXVGRXend5bWdiTzFPeWg3Q2JWNApjdWVnNm1UYk1CYjRBbSt4M0hiUzlNZEdIQ2ZCY2dkRy82N1Q2V0NkMSsvRENkaklVQ2VxanhpSERsbGIyNHZ5CnhlblgwelRZOG5UdEFvSUJBQ2VORXI4OWpUM2s4eFpFNXpkZk01WVdRbE45ZmU5WDcyYldUVWY1RU5CUGEzYzcKRU8yM2ZQSythaG9laXdkOVdlamsrelh5SUduUS9FNlYvMFlkWXFKd3AxQWxoVm45UUp2Wk55dlhaSWlLd1NzOQp2a2tUdHlzM3FMV2dXMWVsYlNxaEdXUk9ETGtaSWVnbms1eGpPN0dSTm16aUZiWC9ublRNdWRzRTZyUmRWMU5SCmJIQ1JLNzYySldHQ2kvbFZiOHBqWUp1YU4zTzVzTzRRK1doZHlZT2txbitaL2NZcGJMbFIrZzhnbVRYN2ZYaEQKcWdmTjVkc0lpazdsK09QYWplNnliU1hxT3BmSnhRWm52V0xXRmo4ajlxQlZsVEVpT1ZiRkRzb2p0VldUaHZMdQpidEUyV1R5dlZsbGtwRGxjT1BpM0k3UkZBRnZ4aHpZZ2RiS2FuTGtDZ2dFQkFLSmRRaDY1VFFBeWI2NEhTWXRQCmpGVE1DdW9rSnV4dm42eGYxNHkvWVhHM3dOQytjTkMzMVAvb1puTnBCVWNCWXQ3UHhuMkplYlR3dzlZd3RvRGgKUWsvYVlnbnR4ckpsS2dJcHgycmJhWjRvbzBSZnJhenBxU0lmd2graFZ2aGFwK1VWU1F3Zml4U25XUit3R1pzWApGQlhxWmtFSkZMNUx5aGlJQ3dZMWlMbERRUldCNkhzN2VwYjU1WEQyMnVqRG56UmZKNktxZWsyOFBZaXN1U2o5CmZwamExT2hKQ3BSbkI4M3p2SmV1TWw5MW9CTHFkNHNveElmZWNicUtJZzFlb1VBMFBQQ2J3VW5vam5HK0hFMWMKOFVCZnJ1aFFETHNqM3F0S29aMHJzK0QraUVJSWl2eVphL1JCMU5vaGR4NGJnenVFNUZqNzhuUXdtU1BLTEhFQgp4WFVDZ2dFQUdUbkpZQTBrY25pcEpXQ0xMQm5DMUFvQlVHWmFQZHJWSy9vQ3phQjg0UGlGakdNTlQ5YkQ5L3N5Cm5od3lZTThESXA0S3IwTUVTKyt6TkloMGhqOUxiWlN0WERWSHpOYlJyOEIwSGgxRGQ5d01mMGFEdFNDRHQrRmEKWlhQV1IxNEdPSm94MUFPSXB4UDJZUjVoUFJYOXY4NnFrQmN5bmRKU2RXektKUldZdmF6Ujc4Ymg0N3pYOHhqeQpuQkZvMWQ4dVFCcU9vOW9teWVHK0VEaGFLUE0vSUZ4aUJZaWIybVlxOFd2VVlvTldtVXU0WjByYUlXMjZ4MGRpClpFeXduUGdzeTdsR05HdytpRzhod0xzYzlXRTlkRFlKSDVEcU5MSXhvcFg1RktVdFdmSEJrbEFFYzNBTkpoZWcKOTdGTnlBbithNkRYUEJ5d1J0QTU3OGNVUmFjeitRPT0KLS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLQo=
#     # how to generate: base64 encode a x509 certificate signed by the above CA, using the above private key.
#     # example generation commands:
#     #  - `openssl req -new -subj "/CN=idm" -key ldap.key -out ldap.csr`
#     #  - `openssl x509 -req -extensions SAN -extfile <(cat /etc/ssl/openssl.cnf <(printf "\n[SAN]\nsubjectAltName=DNS:idm")) -days 365 -in ldap.csr -CA ldap-ca.crt -CAkey ldap-ca.key -out ldap.crt -CAcreateserial`
#     #  - `cat ldap.crt | base64 | tr -d '\n' && echo`
#     ldap.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZXVENDQTBHZ0F3SUJBZ0lVSmUvK1J0UUZQNmhUeTA5c1dqU3hsWmF3clBnd0RRWUpLb1pJaHZjTkFRRUwKQlFBd2F6RUxNQWtHQTFVRUJoTUNWVk14RURBT0JnTlZCQWdNQjBac2IzSnBaR0V4RWpBUUJnTlZCQWNNQ1VkeQpiM1psYkdGdVpERWRNQnNHQTFVRUNnd1VSblY2ZW1KaGJHd2dSVzUwWlhKd2NtbHpaWE14RnpBVkJnTlZCQU1NCkRtTnNiM1ZrTG1aNlltd3VlSGw2TUI0WERUSTBNREV4TmpFNU5EWXdPVm9YRFRJMU1ERXhOVEU1TkRZd09Wb3cKRGpFTU1Bb0dBMVVFQXd3RGFXUnRNSUlDSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQWc4QU1JSUNDZ0tDQWdFQQp0cGsyTmRvdE1lR0ZPVjc2UnVJU080QXBnZCsxK1hQb0JpeGZsRTRBWElhMXppWVlEUk1qbzZZT0x3UlhtTjZzClJBeGhub0VEUndIZ2VtVUN4NzRaRWRjY1VTTkdBNEkydXJOWlNTT0kxQzhwdkJkQ3JRejQ0SFVuL05tZ2tjMXMKQVNUNThodVg1MUk4Y0tlakxGcmRNbXdnSlVOemZ3RElMdG40dkVrZ2Y0aXBKZHRFYXNoQWQ3ZnE1YjR2NWRGdwp1dlBDOVY4RU15a2tGbXR0ZTNlam5ya3d4REgvcFlSejA1R05WWEJIQm52ZkxNRCt1MFgrdGlFQ2Z0RElyNkVICnh5YkNaVUIzQWhYRHlaRzMvM0pEZXRWYjFTV0ROTndvVVJDNkFWenorT1dtM3Q5Y2pFU1NGU3pRMVU5UVVpN0QKQ21oTVhMY3AvOTFIc1VZNEsxZkN4UDUyMkdYbldtM0JqbTZVTnBrL3dpRHpGaFRtNkdObG5KTUVZRjlXZWdUaQpwZlNONks1RFNjak5KeS9UaWQwdnRtNnZOTjNsKzF2UTRiVWpmWE53VXhpampTd3A5OERWNG9BNU05ZWpkS01mCm5WSy9YS1R6dU0wMjRuNjZncGMrempONmluOWlTeUwxMmhGU0xCek5ZWlZnWjhKbkc3eVVPZE1lWlRiMDFneEoKbGdwNitKaTh0dWs3cHEvUWlrbE1Pd21oUjR1WFkxV1FEa2EwaFp3N21GT3lEa2lwbGx1d1Z0RVdxbUIvMGpSRQp1SjZzWG83bjh4ZDl3cHNYd2x6bUZDSFhTUGlWN2NETU5IdHBuRW5zdW5BSHEwK3pxN0JwZE0vNFhxQUtYYUluClJ3RkVIYTc3MVNKRm1tSW1reGE3NmtJeWVhN3ZMZWJrdGFlcUtRMXhLS2tDQXdFQUFhTlNNRkF3RGdZRFZSMFIKQkFjd0JZSURhV1J0TUIwR0ExVWREZ1FXQkJScVk2RFZlTG5paUNNdENkUFE5OXo1aFVPVjlUQWZCZ05WSFNNRQpHREFXZ0JUb08vNnp1dGNYeSsrN1lTeWREWGRHdlV2bEtqQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FnRUFLQXhjCk1LQm12cUpLZG9heTVjbUlYNnpzTG1XNjRCOEFKcmdKRHczY3Q5TVhzV3Fac3NMK3Foc2NiMUwyRFRjTlNxUnoKSFdoOVZJOTd4WVJKdWVTb1Y1SHVmTGdTVzNSN3Bzd1gySGo4R1BmSHdmaGFNcFQ5SHpuNkxUNmxlN3ZlMzJXRgplckh5QTNDOHFYZ1ZFNlZVeXA1YUx4UDVBeXAvK3JZZksvRVRWQkF2NElOZHJaVlc2OFZhckE1TGVrdmhia2RXClQ3N2xlVXBUbVFXN2t3YTRBbkNMYTJLUEhnYXlSQ2piaFg1UFpSSjZyRWpzWjk0M3BTUi9hY0NUckpjM0xkZ0kKRlFudnYvUHZCbjR5MTdPY05jclJ6VDU3ZGxUekJ0UTdaQnRSYjRYT21YbEZBUWJEZUlEMW0rZFA0VGN2STNGVgpLZE5sVjAya0k3NGM4aXhrdldxamViUHcva2NYSjJxM2Z6VXBBQ0VnRXZaTmJ5QXFWaTlmZ3BlYUIzaUNXdFltClh0ZnlmbGZLdy93TWd0ejRKZXd5Y2RFejNyM1dKYmx6b1hpbVlXcnY3c1hwTUlmV1NJK0p6NGtnVVVzM1lmMGMKUlZPVjJqU2NrTlZzVkRDRXJYd0k2ZG9GeXczU216Rmtsb2ZETmgrL0pUNzJiTlZWTFhueUpENEprN2RwbEx5UApteG96UWJ4Um1DZVZsN1NNRDN3Vi9oMnlWdGgxc0o4SndjU3Ntdkp5REdFS3B5WTVUMEhjaWZBMkxkV0prN09mCkZlU2h6MTNITFJ3UjRITTRNQ2J5V0dETVRZNUJQRXNLankza0w2WXQyZVV1ZjNROGZuSmozblp1QXN3WlZ3VW4KdWpYRzZJRUZEcHVBTHJEQUFCT0hURkM3eXJ6dUtlanhHVlJrZ1hFPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
apiVersion: v1
kind: Secret
metadata:
    # default for secreRefs.adminUserSecretRef
    name: admin-user
type: Opaque
data:
    #ENC[AES256_GCM,data:SYHM6o8Ln+LYpQ7d8DBz2Ss7qA58zqyfje1ru0Ps+8cr6fXZQ5grh68=,iv:ZxfDJZtHnTav8nrS4SLk6KhY7WTR3/ZgdrGaQL4z/to=,tag:emEestBuMH/XmxIvTS3nDg==,type:comment]
    #ENC[AES256_GCM,data:otx4rivC3J2Hw7h2DdXbx/8zxRWr6AXxXx7Lh4V3rVmXWZOXzXI4p8p5FG7hZDayobsb6L5Ytn88UCjDqU96BECx5c8BfWVrh3CHfIjBIXbBL7KmGw==,iv:A2Vq1M3tCZ0wTPhQ/8zhtclRGUnEav50S1Oo5sJNawU=,tag:qQC6mmO5pkCxtgikV2TCRg==,type:comment]
    user-id: ENC[AES256_GCM,data:j/eebKJRuBw=,iv:f2cMAOZahEdnXHGxZkNSJGLHzJraUwRTHoRVvDD+YhI=,tag:LBup/b8yIoCpDjVuWuAilg==,type:str]
    #ENC[AES256_GCM,data:vNbL/axZJY6CzS5m+OiFGg5dbZCPk2OwUoHPE7su2P3oMQ/I8+8cl5JL4NPEFgwuOMwuiI+PDe3XgCrWP1CcrorLXbiuSJeq9BCkdpqu8vylQ64rMf4=,iv:RzRHoJhv3N0s5lhKC4367oyZPKSpbqFSKNdozpU/AZ8=,tag:9/Z+IYdg2s2Ccx4L6qCUoQ==,type:comment]
    #ENC[AES256_GCM,data:5NC4KiW6QKer75z6fmHrRLKcDeaGXgGNS8ek1DCDI17kd21p0aXO94NzbnPIZK/7uyeI+IVyU7PcZuFyacGHi6AiMZPaxSr3mt5al1Bo6XRolFLfvwek9xTUQU90Q3yTzP1lCa8ipdu7l3YUZdc5s7novA==,iv:ikejnoXVnse0jvw6+lfX5jpXUOK2F/OWCxilASwZ/EA=,tag:z2EeJ339DRnWZ/3RRuuj3w==,type:comment]
    password: ENC[AES256_GCM,data:M2vyGmHLoSCnIVtpMjNEmjoiCco=,iv:aXBOxdGMujHCRu9z8KeWRTbFnKa4ciWVOk3GR7abM8w=,tag:5ue/f2FdBBdl/GhnbXxqjA==,type:str]
# ---
# apiVersion: v1
# kind: Secret
# metadata:
#     # default for secretRefs.idpSecretRef
#     name: idp-secrets
# type: Opaque
# data:
#     # how to generate: base64 encode a random 32 byte string (mixed characters)
#     # example generation command: `openssl rand 32 | base64`
#     encryption.key: TaPoxvXtAe+HWFJpgNEIkWQ6nY92yaeTphXZgShPEsE=
#     # how to generate: base64 encode a private key (eg. RSA, ensure that you use reasonable long key size)
#     # example generation command: `openssl genpkey -algorithm RSA -pkeyopt rsa_keygen_bits:4096 2> /dev/null | base64 | tr -d '\n'`
#     private-key.pem: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUpRZ0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQ1N3d2dna29BZ0VBQW9JQ0FRQ2V2elBneC9NOGZ5UlMKVVFNUWdGRy91Y1dvc2FSQjVnUmRxWGg3anh5SE5ucStXd1Y0aFdYd3VvbXVBSm56R0dqNFpleUdTZ3JPRGtBVQpRNnZKeGdtZERjdC9CYW9OSHBxd0s5bVBhVFYrNFkycUQzcXVTYVlwclMzNGx5d0dGeXVJRUhMS0ZXSnd5d2VSCm1GWG05QXdXY1VzNXQyMFBrV21qbURvVlAwWHhuVytXTm9pbUJLZnFCSCtwMUUrTnpZWFRHWXoyMW4weWVkS08KbUZrREtNMUNaUTdRQ2Z5OXIxMGFTYjZNL2Nlazkvc0VaTDZMMGNoekR3dmFibTBocStGdXhqZ0ZhVGhTUGFnbApPbFpwRlIySDYvYXFwMFFtcHo4aDBLdGRHQ05MQUtOZVljNGVQVThOREZObXFIeGZoRHhsM2ZMS3gySUw5bXRLCk5LRStFNzA1eFY4NFArdkV3RzJ3d1Fab3JJb29yTm9wWFpkcmJGcjltN0ZPZjBnTllUdktiaDZZUG9TWWwrUFQKa05aQWh5YTRmR0YzRFFEQi9zRXdpeGpRbnNqT2NldVM0dVdZcXIxdmRtdGdFZllsN1U5TnAzNmxXdGo3eEhwNgp4QlVYSFF0eksyYjNWbjZyN0JXYm4xR2JxQjdPY085S2Q3S05WQWs4YVNIeFdaSk9xMEQ5aTdleE9QUTVhMmxrCi9JMXorV1pYSEhOTHFZT2E2K2VtWURpMmd6eVNCMFNjc1FTQndSNU4rdGoxYjVGdjk4TTFqY1g5b2pqRkE5Y0IKWDJ2bXROTW1mNmVpUmJta3ZyUTd1R2NpTitXUHV6dlBzK1F4VTRqa3JGT1EzR2YzK3lLcHgrdldOc2F3aXJNbwprNS9LdUlpV3NONjh6RzBMOWMybTBacXd3U2dVcndJREFRQUJBb0lDQUF3WVdBVGh0eS8rSlVUNi95ekdyM1BZCk1saUVFR3ZQbkEyTUxWaUhYWTVxZHVKWFg3ZFZ2VXFnMW45TXljTmRNaGVhOXh2VU93dmF4MjhaS05id0lTaTMKaXdXeFBNcFFjVXR5OW9TWUU0ZGQrc1BnOTJGSUkwSThVUUJienZMaWc3Zm82T3RxR0Z5dEJoL3daMlhOWlE1ZwpzTWFZL3lwQjAyRmFPOTFha00yejhuTStKeDNmR2tiRG5sRW1QVmw1NEo4UTdLTkhVYlZZS3RRZjJoMnZnaWx6CmpGNjFlVzJmd0Ribk5OUXhQSURlbEFybHAzbW51NG9UWDJmVHoyVFN0Uk84N28vRnBlWStPYmduRmJ1ejdDZ1YKc1JtWGg2TWFUYjV2S1FuOWMzMmN5Q3NYY0o1Rk5aSUhtbU1tcGQzeE5BT0psdkllOXVMS2NsVHVaYUFCTTYyUQpiSTEyU3Y1RU9QV2I0NmU0TkR3TlZWbW9LTDhjb1FYUU9sb2FXeE05c1VPMWRkOGpoclc3cnB5MUFLaHBzL1hBCnpsa2ZDbGxFSkxBR2NRNG5pMnBFZ21FeXBGd08wM2RqczJWdCs4U0xUZGc0UjZUMGR3MVJISHE4NXRJSFFldkwKbkJnQlkvWU5tTU8yelVpb2E3dFN1OStHNTdlelZmQkhTeEUvUWpHalJTQnA5S3NVSGtGUjAvTFFGMG4xZDFlZApMbG85MW04TEdTcnlnZVZMR21RNkFrUjh6MXQ2Nk9WMWljdk5tUU9XUEkrRHA1ZnpiSHk1N3RBV1FhdC9ibHVoCnlZOGRyd09QelJIcTFudXVmSXNianNEY2tzR0tHalM5RmJDdnNHQk1JbFZOY3dwWkcxVjQ1S2xrWU5pN2NidDAKdlBhc3ltVVYrd1RWWXJQSEJmUWhBb0lCQVFEUHI5ZERLWGdTa2ZFaElYa04vN0FKMmtIcERTVVJXYW0rTlo4LwpUck82VDNDMGpnRytoc2gvL0JxQmpmWHp1RXdKdXJQZUlWM0F3bGtsSUxCREVTOXN3a3pOaFpGMDdKUTNPTTVCCmhoT3A1Z2s4K3lmQ0dMN2xNeWM4em93NGM3UHpLb1ZWQ1U4YlRUWW1vR3FqTDJqSzFkVW5aSHcvNlE4NGd6c2IKQ0tzUVE0bUpMcVZFNXQ2T0FYWTliZHk4a21PdW90bjl4MGpsMm1DZER2ZU5BcTgwTkJway9mQXVHNEhHaGtUQgp5b01VMXYvK2MvYXpVQlZ6eFJwdUhEeEYwVWQrYW5memdyVHdWcDJFVVBweG5tRE9QWEtHRW1VeTJHSTY4VUNNCnhXTXgzeEJUcVJIemVqeGFvRnBkWk9Zb2tDY2ZiSHBJZ3diZEw0WHJCQ1k0cjI2OUFvSUJBUUREck9PL0pTOUIKMHdxalVOTWZEbElBcFhNODZRNWVSNHJsdnZkRFExNUMwazE4WHpQc3VPbDMzS0VFZXZDemVOZUdlRkVvME9KTgpqSnRiUUFJZEJXTkhnT09xQ3JkRitRRnU1N3BxbDNQYmhZWC92dVlLcy9xT2hqa2p6YXdsSUFoYU56T1dWKzNLCmZITzJUTHV5djhQSnI4eENWSkJYVGtUNzBCdGM2c3hGaWF2V1FKcE5aVk42Vzk1b000TzNpQ2V5STd2Q3psSmEKOFFFVVZEVFQ3VGtTVGVjc0NzcTk2NXIvcUVZU1c1eDN1dWJlZE1Yb0wvbXMzMGc2dEsxUkNqREEybWtMU1dYYQpPa0hiVm10VXArVnZtU3hFOGE0MkdUbUtuc20yVW9qdkl0bktQTUwwMzlaNWhGNE5QTC81M2Znb09ONk4rZXRmCjExWWhkOG55ODgzYkFvSUJBQ1hFcG5MU1FjR3V4Smp2eTJIZVU1Y1hGOUZYMEp2ZElGODB4U2J3R3dNUW0wQmEKYXJySkxBRUtTWSt4eno1cEQzcmRkd1E0TVNKeXRWOXBHR1M1NVZQejZaK2VZSnRRd290Z1N6SGpQZ1F4anhDRgo0KzhLTFB6bFZvZGFVR21ic09mUm5ibWZIY0dyUXVPM1hHMGNuQVAyNnZKazlhdHhxSkR3WEhsSUZFTzY1SElNCkI0WUdMZ2JKQVVXZWl2dkg2MVRBekwrMzArdm8wSlQvT2NsczZZdW14ZjREcC8vYWhMa2poYkZ3TUhKRHZ2MzQKL0s0VExET0hibzBEbVhwZzJvMkVzeGVYZDJ3VmRFT3hyam1uUVpkLzJTbkVncDdDZHVxZElNMzR2MWM4WjIydgpXMUpac2t3UXlSNGUwVFFqTXRvbUVmN0p4Ui9JR3FSb2RzTHNORWtDZ2dFQVJVTkhnbnVKRk1XOU9EMzkzVHBXCmNJQWdJR2xtZXB6Y1g2S1BKN0lMQmFBbmFXVFJubk45d0wzS0NTbnpWYlBxcG1Da2FjdzJycmljclZvazVWem8KM1lDVUZiYWhWUlZsR25yUUU3YjBmYm52eXEwcUJKUGNsdUtRQzBwY0t2QUJ4TjFSVjJCY2ZaWTc1MFdXRXhtcQpGaFF5T3pCdnYxZW5OM05jbkRGSWlUeklKSmpOaGFQZVBxdVNPRlF6eFoxZVg4SWlUangyRGxiTXlRTmRoNzZxCnV2MzBYRFNkdTBoUW56cFRRMkJHTEdOdUlVUTRZWTNKMVJWY0hkdWlsZE1EbXVBMDJwZnFnNnFuY1JwUDk3Rk8KbDRnaWtXenkrNWRHTlBrcjhXdVpxUHd2RjFVV3RWTWVPZmxPeVdTOWw1YW9wcVFxc3hySjVDejNBZlhDK0VxdwpqUUtDQVFFQXdsVkx3c0dndjhjSkdWTFUxb05HNG9MYlhYMlVFWGVUNTVrbE80eXJEY3F5ZWJaR3NqYVR6RGpvCnJPRDhVVlJGZkw4Mnc2dVV5VC9XYkV4bC8yNGZQRXRxRlRnTnBUUmFZZ2lrRGJMb2pmMW5VckpEWVhTSThWaWIKZjBFaTdWSHlhZ2w1Qy84VTZZbTNtR3l2ekZlaXFhWnJaWFhuV0FBeXRaSW1NVHppNTQ1VFAxZ08vZnl2UUJuWApYdmVRSlU5dXJBem9UdWM2UTEvWFArZEhTSHNCbkJwc2llNVlLb1NGa21GWWk1NVFWZEIrWittNjRNMXozT2xxClAzOFp2WTBFRytrQjh4VE81YzUrVXpLWmI2T05XKzljRTYvdzNxeldhd2pDZTFRMS9rVlI0VmMrT21lbUY5b2QKQWE4U3NuWFpRZnUvSmJpQmhEeS9oSEpMM0p5eEp3PT0KLS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLQo=
# #END INTERNAL USERS
# ---
# apiVersion: v1
# kind: Secret
# metadata:
#     # default for secretRefs.jwtSecretRef
#     name: jwt-secret
# type: Opaque
# data:
#     jwt-secret: bGE5eGdQNnNxdVQweElLdmFFeUJRenB0cG9HaW00VWdSQ2lWaE9LUjg4aVlmMGVwZ0wK
# ---
# apiVersion: v1
# kind: Secret
# metadata:
#     # default for secretRefs.machineAuthApiKeySecretRef
#     name: machine-auth-api-key
# type: Opaque
# data:
#     machine-auth-api-key: UU9la1NtaG5sanpLRVZnckE3WDRQWkx3SGNud1YwcEN1bEx6b0xRU3V5THFGNnZHYksK
# ---
# apiVersion: v1
# kind: Secret
# metadata:
#     # default for secretRefs.storagesystemSecretRef
#     name: storage-system
# type: Opaque
# data:
#     user-id: MTY1NDQ2NjItZDY1Yy00ZTRkLWI0ZDgtZmNiNmQ0ODVmZGFm
#     api-key: UUhwWVk5NU1FOXQ0WFgyOEc5R2ptZzZWWXRpTDRSZXlIdjMwOWZ1MjRjNnFkTlZWN2MK
# ---
# apiVersion: v1
# kind: Secret
# metadata:
#     # default for secretRefs.storagesystemJwtSecretRef
#     name: storage-system-jwt-secret
# type: Opaque
# data:
#     storage-system-jwt-secret: aVVmTVo2OTh5dXFHRVpESlp2NTczUUZydHNSUXB2LFdyUlA1bmg3Y3lXVFR4WWRJUE0K
# ---
# apiVersion: v1
# kind: Secret
# metadata:
#     # default for secretRefs.transferSecretSecretRef
#     name: transfer-secret
# type: Opaque
# data:
#     transfer-secret: T2pGREtmRTYzMWpWNVdpbDlNOXNxLkVINjFhMG9ZQkdyd09mYVhzYjVlQVV4b2pQcEcK
# ---
# apiVersion: v1
# kind: Secret
# metadata:
#     # default for secretRefs.thumbnailsSecretRef
#     name: thumbnails-transfer-secret
# type: Opaque
# data:
#     thumbnails-transfer-secret: U2ppZVhzVWJzYmtrZFlyai41TTF0QXQ1MVpIRFM2bkR4OEZtOHVOUUJsb3l4TEQzYVoK
sops:
    kms: []
    gcp_kms: []
    azure_kv: []
    hc_vault: []
    age:
        - recipient: age1e8t93m32pkq6v5pgce4gm39xmtm967j9scmnvnrwpkaccwvunsyspwz3kp
          enc: |
            -----BEGIN AGE ENCRYPTED FILE-----
            YWdlLWVuY3J5cHRpb24ub3JnL3YxCi0+IFgyNTUxOSBBV1J2c3JOdU9mUUpmemI2
            UWRrY3FvZllCQ0h0WGVJaTFUaEIvanE1djJZClJLa3RzYXFNMnBSOTMwRGxpbDEx
            YzdxRGJDNFpQaGova0VZcG9zdHV0MUkKLS0tIG80R1U0NUJ0ZlZ4UGJhU2dLVEJ4
            N0JHamJsSlZzNHVFSnNZbTlmd0RjdmcKB765mHQ+sd19oRHVSEJyBlNWGnfEMahc
            w1RgTvejuSlQEFDCRZiRLfwJ+UrTwNOUlvPbIUA83S98rwKO139a4w==
            -----END AGE ENCRYPTED FILE-----
    lastmodified: "2024-01-16T21:29:29Z"
    mac: ENC[AES256_GCM,data:Fna/nUiDUT+vVE7QyLW6cPmz+1QgCVAy6vYxajNpLUDnkoQ7OChdWzZJeQLDuwIsKSjHFXqyFrE0ruyc3SQnCo9rarkjaJlYctDd/dDE5DGWvigEHqPcQ3LO60SixsXnCF/HHpgGdb+tUsXKEcil+S0NamnzpR+ox2xbF07fUpU=,iv:QZGc60kDs3C5jH6UxOu762Z9GcPqpI2gsoTTjDnKLk0=,tag:kZ/GrgvjQ5PWo6EhS4Wb/g==,type:str]
    pgp: []
    encrypted_regex: ^(data|stringData)$
    version: 3.8.1
