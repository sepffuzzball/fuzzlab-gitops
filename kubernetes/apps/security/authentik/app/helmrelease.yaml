---
apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: authentik
  namespace: security
spec:
  interval: 30m
  chart:
    spec:
      chart: authentik
      version: 2024.2.2
      sourceRef:
        kind: HelmRepository
        name: authentik
        namespace: flux-system
  maxHistory: 2
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    global:
      image:
        repository: ghcr.io/goauthentik/server
        tag: 2024.2.2
      fullnameOverride: authentik

      podAnnotations:
        secret.reloader.stakater.com/reload: *app

      env:
        - name: AUTHENTIK_POSTGRESQL__HOST
          valueFrom:
            secretKeyRef:
              name: ${APP}-pguser-${DB_USER}
              key: host
        - name: AUTHENTIK_POSTGRESQL__NAME
          valueFrom:
            secretKeyRef:
              name: ${APP}-pguser-${DB_USER}
              key: dbname
        - name: AUTHENTIK_POSTGRESQL__USER
          valueFrom:
            secretKeyRef:
              name: ${APP}-pguser-${DB_USER}
              key: user
        - name: AUTHENTIK_POSTGRESQL__PASSWORD
          valueFrom:
            secretKeyRef:
              name: ${APP}-pguser-${DB_USER}
              key: password
        - name: AUTHENTIK_EMAIL__HOST
          valueFrom:
            secretKeyRef:
              name: authentik-secret
              key: authentik_email_host
        - name: AUTHENTIK_EMAIL__FROM
          secretKeyRef:
            name: authentik-secret
            key: authentik_email_from
        - name: AUTHENTIK_EMAIL__USERNAME
          valueFrom:
            secretKeyRef:
              name: authentik-secret
              key: authentik_email_username
        - name: AUTHENTIK_EMAIL__PASSWORD
          valueFrom:
            secretKeyRef:
              name: authentik-secret
              key: authentik_email_password
        - name: AUTHENTIK_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: authentik-secret
              key: authentik_secret_key
        - name: AUTHENTIK_REDIS__PASSWORD
          valueFrom:
            secretKeyRef:
              name: authentik-secret
              key: redisPassword

    authentik:
      log_level: info
      email:
        port: 587
        use_tls: true
      secret_key: "${SECRET_AUTHENTIK_KEY}"
      outposts:
        container_image_base: ghcr.io/goauthentik/%(type)s:%(version)s
      error_reporting:
        enabled: false
        send_pii: false
      redis:
        host: "authentik-redis.security.svc.cluster.local"

    server:
      replicas: 1
      autoscaling:
        enabled: true
      pdb:
        enabled: true
        minAvailable: 1
        maxUnavailable: 1
      ingress:
        enabled: true
        ingressClassName: external
        annotations:
          external-dns.alpha.kubernetes.io/target: "external.${SECRET_DOMAIN}"
        hosts:
          - host: &host "auth.${SECRET_DOMAIN}"
            paths:
              - path: /
                service:
                  name: main
                  port: http
          - host: "sonarr.${SECRET_DOMAIN}"
            paths:
              - path: /
                service:
                  name: main
                  port: http
          - host: "prowl.${SECRET_DOMAIN}"
            paths:
              - path: /
                service:
                  name: main
                  port: http
          - host: "prowlarr.${SECRET_DOMAIN}"
            paths:
              - path: /
                service:
                  name: main
                  port: http
          - host: "lidarr.${SECRET_DOMAIN}"
            paths:
              - path: /
                service:
                  name: main
                  port: http
          - host: "radarr.${SECRET_DOMAIN}"
            paths:
              - path: /
                service:
                  name: main
                  port: http
          - host: "hubble.${SECRET_DOMAIN}"
            paths:
              - path: /
                service:
                  name: main
                  port: http
          - host: "sab.${SECRET_DOMAIN}"
            paths:
              - path: /
                service:
                  name: main
                  port: http
          - host: "sabnzbd.${SECRET_DOMAIN}"
            paths:
              - path: /
                service:
                  name: main
                  port: http
          - host: "adguard.${SECRET_DOMAIN}"
            paths:
              - path: /
                service:
                  name: main
                  port: http
          #- host: "*.${SECRET_DOMAIN}"
          #  paths:
          #    - path: /(.*)
          #      service:
          #        name: main
          #        port: http
        tls:
          - hosts:
              - *host

    worker:
      replicas: 1
      autoscaling:
        enabled: true
      resources:
        requests:
          cpu: 50m
          memory: 512Mi
        limits:
          memory: 1Gi

    volumes:
      - name: media
        persistentVolumeClaim:
          claimName: authentik-media

    volumeMounts:
      - mountPath: /media
        name: media

    postgresql:
      enabled: false

    prometheus:
      rules:
        create: true
      serviceMonitor:
        create: true

    redis:
      enabled: false

    serviceAccount:
      # -- Create service account. Needed for managed outposts
      create: true

    kubernetesIntegration: true
